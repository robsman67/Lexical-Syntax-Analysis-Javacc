/*
options {
  IGNORE_CASE = true;
  STATIC = false;
} 
*/

PARSER_BEGIN(BasicParser)

package fr.utbm.info.da53.lw2.parser;
import java.io.StringReader;



public class BasicParser {
    String testChecker;

    public BasicParser() {
    }

    public static void parse(String input) throws ParseException {
        BasicParser parser = new BasicParser(new StringReader(input));
        parser.S(); // Start parsing from the grammar's start symbol
        System.out.println("Syntax is correct!");
    }


}

PARSER_END(BasicParser)

//The skip Token with the comment token

SKIP:  { " " | "\t" | "\r" | <"REM" ((" "|"\t")(~["\n","\r"])*)? ("\n" | "\r" | "\r\n" | "\n\r")> }


// Keyword Token

TOKEN :
{
	< CR: "\n" >
    | < PRINT : "print">
    | < EQ : "=" >
    | < ADD : "+"|"-" > // lower priority
    | < MUL : "/"|"*" > // higher priority
    | < STRING: "\"" (~["\""])* "\"" >
    | < NUMBER : (["0"-"9"])+ ("." (["0"-"9"])+)? > 
    | < ID : ["a"-"z","A"-"Z"] ([ "a"-"z", "A"-"Z", "0"-"9" ])* > // doesn't allow to start with a number

}

void S(): {} { E() <EOF>           }
void E(): {} { T() (<ADD> T())*      }
void T(): {} { F() (<MUL> F())*      } // ADD higher priority
void F(): {} { <NUMBER> | "(" E() ")" }