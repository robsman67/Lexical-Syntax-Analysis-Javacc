/* BasicParser.java */
/* Generated By:JavaCC: Do not edit this line. BasicParser.java */
package fr.utbm.info.da53.lw2.parser;

import java.io.StringReader;
import java.util.SortedMap;
import java.util.TreeMap;


import fr.utbm.info.da53.lw2.symbol.*;
import fr.utbm.info.da53.lw2.context.Statement;
import fr.utbm.info.da53.lw2.error.*;
import fr.utbm.info.da53.lw2.syntaxtree.abstractTreeNode.*;
import fr.utbm.info.da53.lw2.syntaxtree.binaryOperatorTreeNode.*;
import fr.utbm.info.da53.lw2.syntaxtree.comparaisonTreeNode.*;
import fr.utbm.info.da53.lw2.syntaxtree.statementTreeNode.*;
import fr.utbm.info.da53.lw2.syntaxtree.valueTreeNode.*;
import fr.utbm.info.da53.lw2.type.Value;
import fr.utbm.info.da53.lw2.type.NumberUtil;





public class BasicParser implements BasicParserConstants {

    private String testChecker;

    private int lineTracker = 1;
        private final SymbolTable symbolTable = new SymbolTable();
    private final SortedMap<Integer,Statement> program = new TreeMap<Integer,Statement>();


    public BasicParser() {
    }

        public SymbolTable getSymbolTable() {
                return this.symbolTable;
        }


    public int getLineTrackerumber(){
        return this.lineTracker;
    }

    public void incrementLineTracker(){
        this.lineTracker++;
    }

    public SortedMap<Integer,Statement> executeCompiler () throws CompilerException, ParseException {
        System.out.println("Execute Compiler");
        this.symbolTable.clear();
        statements(program);
        return program;
    }

// Put it a the end in order to reconize it at lastly.

// Grammar Rules from the course
  final public 

void statements(SortedMap<Integer,Statement> program) throws ParseException, CompilerException {
    lineOfCode(program);
    restOfStatements(program);
System.out.println("Statement");
}

  final public void restOfStatements(SortedMap<Integer,Statement> program) throws ParseException, CompilerException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CR:{
      jj_consume_token(CR);
      lineOfCode(program);
      restOfStatements(program);
System.out.println("Rest of statement");
      break;
      }
    default:
      jj_la1[0] = jj_gen;
System.out.println("Rest of statement");
    }
}

  final public void lineOfCode(SortedMap<Integer,Statement> program) throws ParseException, CompilerException {Token x;
     AbstractStatementTreeNode stmt;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:{
      x = jj_consume_token(NUMBER);
      stmt = statement();
int lineNumber = NumberUtil.parseInt(x.image);
        if (lineNumber < 0) {if (true) throw new CompilerException(CompilationErrorType.INVALID_LINE_NUMBER, getLineTrackerumber(), "Negative number line Value");}
        if (stmt != null) program.put(lineNumber, stmt);
        this.incrementLineTracker();
        System.out.println("Line of code " + getLineTrackerumber());
      break;
      }
    case PRINT:
    case GOTO:
    case INPUT:
    case LET:
    case RETURN:
    case GOSUB:
    case END:
    case IF:
    case WHILE:{
      stmt = statement();
if (stmt != null) program.put(this.lineTracker, stmt);
        this.incrementLineTracker();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public AbstractStatementTreeNode statement() throws ParseException, CompilerException {Token x;
        AbstractValueTreeNode leftExpr, rightExpr, var, expr;
        AbstractStatementTreeNode stmt, thenStmt, elseStmt;
        AbstractComparisonOperatorTreeNode re;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PRINT:{
      jj_consume_token(PRINT);
      expr = expression();
if(expr == null) {
            {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.getLineTrackerumber(), "Expecting expression");}
        }
        System.out.println("Print statement " + getLineTrackerumber());
        //this.symbolTable.declare("print", this.getLineTrackerumber());
        //System.out.println("Print statement " + getLineTrackerumber());
        {if ("" != null) return new PrintTreeNode(expr);}
      break;
      }
    case GOTO:{
      jj_consume_token(GOTO);
      expr = expression();
{if ("" != null) return new GotoTreeNode(expr);}
      break;
      }
    case INPUT:{
      jj_consume_token(INPUT);
      var = factor();
{if ("" != null) return new InputTreeNode(var);}
      break;
      }
    case LET:{
      jj_consume_token(LET);
      var = factor();
      jj_consume_token(EQ);
      expr = expression();
if(var == null) {
            {if (true) throw new CompilerException(CompilationErrorType.SYNTAX_ERROR, this.getLineTrackerumber(), "Expecting variable");}
        } else if (expr == null) {
            {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.getLineTrackerumber(), "Expecting expression");}
        }
        {if ("" != null) return new LetTreeNode(var.toString(), expr);}
      break;
      }
    case GOSUB:{
      jj_consume_token(GOSUB);
      expr = expression();
{if ("" != null) return new GosubTreeNode(expr);}
      break;
      }
    case RETURN:{
      jj_consume_token(RETURN);
{if ("" != null) return new ReturnTreeNode();}
      break;
      }
    case END:{
      jj_consume_token(END);
{if ("" != null) return new EndTreeNode();}
      break;
      }
    case IF:{
      jj_consume_token(IF);
      leftExpr = expression();
      re = relop();
      rightExpr = expression();
      jj_consume_token(THEN);
      thenStmt = statement();
      elseStmt = statement();
if(leftExpr == null || rightExpr == null) {
            {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.getLineTrackerumber(), "Expecting expression");}
        } else if (re == null) {
            {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_COMPARISON_OPERATOR, this.getLineTrackerumber(), "Expecting relop");}
        } else if (thenStmt == null) {
            {if (true) throw new CompilerException(CompilationErrorType.NO_STATEMENT_IN_THEN_BLOCK, this.getLineTrackerumber(), "Expecting then");}
            {if ("" != null) return null;}
        }
        re.setOperands(leftExpr, rightExpr);
        {if ("" != null) return new IfThenTreeNode(re , thenStmt, elseStmt);}
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      leftExpr = expression();
      re = relop();
      rightExpr = expression();
      jj_consume_token(DO);
      stmt = statement();
      jj_consume_token(WEND);
if(leftExpr == null || rightExpr == null) {
            {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.getLineTrackerumber(), "Expecting expression");}
        } else if (re == null) {
            {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_COMPARISON_OPERATOR, this.getLineTrackerumber(), "Expecting relop");}
        } else if (stmt == null) {
            {if (true) throw new CompilerException(CompilationErrorType.NO_STATEMENT_IN_WHILE_BLOCK, this.getLineTrackerumber(), "Expecting then");}
            {if ("" != null) return null;}
        }
        re.setOperands(leftExpr, rightExpr);
        {if ("" != null) return new WhileTreeNode(re, stmt);}
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public AbstractComparisonOperatorTreeNode relop() throws ParseException, ParseException, CompilerException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DIFF:{
      jj_consume_token(DIFF);
{if ("" != null) return new NotEqualTreeNode();}
      break;
      }
    case LE:{
      jj_consume_token(LE);
{if ("" != null) return new LowerEqualTreeNode();}
      break;
      }
    case GE:{
      jj_consume_token(GE);
{if ("" != null) return new GreaterEqualTreeNode();}
      break;
      }
    case EQ:{
      jj_consume_token(EQ);
{if ("" != null) return new EqualTreeNode();}
      break;
      }
    case LT:{
      jj_consume_token(LT);
{if ("" != null) return new LowerThanTreeNode();}
      break;
      }
    case GT:{
      jj_consume_token(GT);
{if ("" != null) return new GreaterThanTreeNode();}
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public AbstractValueTreeNode expression() throws ParseException, ParseException, CompilerException {AbstractValueTreeNode leftOp, expr;
    leftOp = term();
    expr = expression_end(leftOp);
if (leftOp == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_LEFT_OPERAND, this.getLineTrackerumber(), "Expecting a left operand");}
        else if (expr == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.getLineTrackerumber(), "Expecting an expression");}
        else {if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
}

  final public AbstractValueTreeNode expression_end(AbstractValueTreeNode leftOp) throws ParseException, ParseException, CompilerException {AbstractValueTreeNode rightOp, expr;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:{
      jj_consume_token(PLUS);
      rightOp = term();
      expr = expression_end(leftOp);
if (rightOp == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_RIGHT_OPERAND, this.getLineTrackerumber(), "Expecting a right operand");}
        else if (expr == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.getLineTrackerumber(), "Expecting an expression");}
        else {if ("" != null) return new AdditionTreeNode(leftOp, rightOp);}
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
      rightOp = term();
      expr = expression_end(leftOp);
if (rightOp == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_RIGHT_OPERAND, this.getLineTrackerumber(), "Expecting a right operand");}
        else if (expr == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.getLineTrackerumber(), "Expecting an expression");}
        else {if ("" != null) return new SubtractionTreeNode(leftOp, rightOp);}
      break;
      }
    case AND:{
      jj_consume_token(AND);
      rightOp = term();
      expr = expression_end(leftOp);
if (rightOp == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_RIGHT_OPERAND, this.getLineTrackerumber(), "Expecting a right operand");}
        else if (expr == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.getLineTrackerumber(), "Expecting an expression");}
        else {if ("" != null) return new BooleanAndTreeNode(leftOp, rightOp);}
      break;
      }
    case OR:{
      jj_consume_token(OR);
      rightOp = term();
      expr = expression_end(leftOp);
if (rightOp == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_RIGHT_OPERAND, this.getLineTrackerumber(), "Expecting a right operand");}
        else if (expr == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.getLineTrackerumber(), "Expecting an expression");}
        else {if ("" != null) return new BooleanOrTreeNode(leftOp, rightOp);}
      break;
      }
    case XOR:{
      jj_consume_token(XOR);
      rightOp = term();
      expr = expression_end(leftOp);
if (rightOp == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_RIGHT_OPERAND, this.getLineTrackerumber(), "Expecting a right operand");}
        else if (expr == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.getLineTrackerumber(), "Expecting an expression");}
        else {if ("" != null) return new BooleanXorTreeNode(leftOp, rightOp);}
      break;
      }
    default:
      jj_la1[4] = jj_gen;
{if ("" != null) return leftOp;}
    }
    throw new Error("Missing return statement in function");
}

  final public AbstractValueTreeNode term() throws ParseException, ParseException, CompilerException {AbstractValueTreeNode leftOp, term;
    leftOp = factor();
    term = term_end(leftOp);
if (leftOp == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_LEFT_OPERAND, this.getLineTrackerumber(), "Expecting a left operand");}
        else if (term == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.getLineTrackerumber(), "Expecting an expression");}
        else {if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

// Prirority of the operator
  final public AbstractValueTreeNode term_end(AbstractValueTreeNode leftOp) throws ParseException, ParseException, CompilerException {AbstractValueTreeNode rightOp, term;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MULTIPLY:{
      jj_consume_token(MULTIPLY);
      rightOp = factor();
      term = term_end(leftOp);
if (rightOp == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_RIGHT_OPERAND, this.getLineTrackerumber(), "Expecting a right operand");}
        else if (term == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.getLineTrackerumber(), "Expecting an expression");}
        else {if ("" != null) return new MultiplicationTreeNode(leftOp, rightOp);}
      break;
      }
    case DIVIDE:{
      jj_consume_token(DIVIDE);
      rightOp = factor();
      term = term_end(leftOp);
if (rightOp == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_RIGHT_OPERAND, this.getLineTrackerumber(), "Expecting a right operand");}
        else if (term == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.getLineTrackerumber(), "Expecting an expression");}
        else {if ("" != null) return new DivisionTreeNode(leftOp, rightOp);}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
{if ("" != null) return leftOp;}
    }
    throw new Error("Missing return statement in function");
}

  final public AbstractValueTreeNode factor() throws ParseException, ParseException, CompilerException {AbstractValueTreeNode expr, var;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN_PARENT:{
      jj_consume_token(OPEN_PARENT);
      expr = expression();
      jj_consume_token(CLOSE_PARENT);
if (expr == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.getLineTrackerumber(), "Expecting an expression");}
        else {if ("" != null) return expr;}
      break;
      }
    case NOT:{
      jj_consume_token(NOT);
      expr = expression();
if (expr == null) {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.getLineTrackerumber(), "Expecting an expression");}
        else {if ("" != null) return new BooleanNotTreeNode(expr);}
      break;
      }
    case NUMBER:{
      jj_consume_token(NUMBER);
Token t = jj_consume_token(NUMBER);
        {if ("" != null) return new NumberTreeNode(new Value(t.image));}
      break;
      }
    case STRING:{
      jj_consume_token(STRING);
Token t = jj_consume_token(STRING);
        {if ("" != null) return new StringTreeNode(new Value(t.image));}
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
jj_consume_token(TRUE);
        {if ("" != null) return new BooleanTreeNode(true);}
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
jj_consume_token(FALSE);
        {if ("" != null) return new BooleanTreeNode(false);}
      break;
      }
    case UNDEF:{
      jj_consume_token(UNDEF);
jj_consume_token(UNDEF);
        {if ("" != null) return new UndefTreeNode();}
      break;
      }
    case IDENTIFIER:{
      jj_consume_token(IDENTIFIER);
Token t = jj_consume_token(IDENTIFIER);
        {if ("" != null) return new IdentifierTreeNode(t.image);}
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  /** Generated Token Manager. */
  public BasicParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x20,0x9fe40,0x9fe00,0xfc000000,0x0,0x0,0xc0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x73,0xc,0x3b80,};
	}

  /** Constructor with InputStream. */
  public BasicParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public BasicParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new BasicParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public BasicParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new BasicParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new BasicParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public BasicParser(BasicParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(BasicParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[46];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 7; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 46; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

    // Create something that goes with a symbol table.
    // Each new token goes with the declare methode
    //


}
