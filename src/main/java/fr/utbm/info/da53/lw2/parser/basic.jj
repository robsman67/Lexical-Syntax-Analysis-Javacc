options {
  IGNORE_CASE = true;
  STATIC = false;
}

/**
 * BasicParser
 * @Author: Robert Hakobyan
 */

PARSER_BEGIN(BasicParser)

package fr.utbm.info.da53.lw2.parser;

import java.io.StringReader;
import java.util.SortedMap;
import java.util.TreeMap;

import fr.utbm.info.da53.lw2.symbol.*;
import fr.utbm.info.da53.lw2.context.Statement;
import fr.utbm.info.da53.lw2.error.*;
import fr.utbm.info.da53.lw2.syntaxtree.abstractTreeNode.*;
import fr.utbm.info.da53.lw2.syntaxtree.binaryOperatorTreeNode.*;
import fr.utbm.info.da53.lw2.syntaxtree.comparaisonTreeNode.*;
import fr.utbm.info.da53.lw2.syntaxtree.statementTreeNode.*;
import fr.utbm.info.da53.lw2.syntaxtree.valueTreeNode.*;
import fr.utbm.info.da53.lw2.type.Value;
import fr.utbm.info.da53.lw2.type.NumberUtil;

public class BasicParser {

    private String testChecker;
    private int lineTracker = 1;
    private final SymbolTable symbolTable = new SymbolTable();
    private final SortedMap<Integer, Statement> program = new TreeMap<Integer, Statement>();

    public SymbolTable getSymbolTable() {
        return this.symbolTable;
    }

    public int getLineTrackerumber() {
        return this.lineTracker;
    }

    public void incrementLineTracker() {
        this.lineTracker++;
    }

    public SortedMap<Integer, Statement> getCode() {
        return this.program;
    }

    public SortedMap<Integer, Statement> executeCompiler() throws CompilerException, ParseException {
        System.out.println("Execute Compiler");
        this.symbolTable.clear();
        statements(program);
        return program;
    }
}


PARSER_END(BasicParser)

// *** The skip Token with the comment token
SKIP: { " " | "\t" | "\r" | <"REM" ((" " | "\t")(~["\n", "\r"])*)? ("\n" | "\r" | "\r\n" | "\n\r")> }

// *** Token Definitions
TOKEN: { <CR: "\n"> { System.out.println("CR token recognized"); } }

// Keyword token
TOKEN: { <PRINT: "print">
       | <GOTO: "goto">
       | <INPUT: "input">
       | <LET: "let">
       | <RETURN: "return">
       | <GOSUB: "gosub">
       | <END: "end">
       | <IF: "if">
       | <THEN: "then">
       | <ELSE: "else">
       | <WHILE: "while">
       | <FOR: "for">
       | <TO: "to">
       | <STEP: "step">
       | <NEXT: "next">
       | <DO: "do">
       | <WEND: "wend">
       }

// Number token
TOKEN: { <NUMBER: (["0"-"9"])+ ("." (["0"-"9"])+)?> { System.out.println("Number token recognized"); }
       | <OPEN_PARENT: "(">
       | <CLOSE_PARENT: ")">
       }

// Relop token
TOKEN: { <DIFF: "<>">
       | <EQ: "=">
       | <LE: "<=">
       | <GE: ">=">
       | <LT: "<">
       | <GT: ">">
       | <PLUS: "+">
       | <MINUS: "-">
       | <MULTIPLY: "*">
       | <DIVIDE: "/">
       | <AND: "and">
       | <OR: "or">
       | <XOR: "xor">
       | <NOT: "not">
       | <FALSE: "false">
       | <TRUE: "true">
       }

// Other Token
TOKEN: { <STRING: "\"" (~["\""])* "\"">
       | <UNDEF: "undef">
       }

TOKEN: { <IDENTIFIER: ["a"-"z", "A"-"Z"](["a"-"z", "A"-"Z", "0"-"9"])*> } // Put it at the end to recognize it last.

// Grammar Rules
void statements(SortedMap<Integer, Statement> program) throws CompilerException: {}
{
    lineOfCode(program) restOfStatements(program) { System.out.println("Statement"); }
}

void restOfStatements(SortedMap<Integer, Statement> program) throws CompilerException: {}
{
    <CR> lineOfCode(program) restOfStatements(program)
    | {}
}

void lineOfCode(SortedMap<Integer, Statement> program) throws CompilerException: {
    Token x;
    AbstractStatementTreeNode stmt;
}
{
    x = <NUMBER> stmt = statement()
     {
        int lineNumber = NumberUtil.parseInt(x.image);
        if (lineNumber < 0) throw new CompilerException(CompilationErrorType.INVALID_LINE_NUMBER, getLineTrackerumber(), "Negative number line Value");
        if (stmt != null) program.put(lineNumber, stmt);
        this.incrementLineTracker();
        System.out.println("Line of code " + getLineTrackerumber());
     }
    |
    stmt = statement() {
        if (stmt != null) program.put(this.lineTracker, stmt);
        this.incrementLineTracker();
        System.out.println("Line of code " + getLineTrackerumber());
    }
    |
    { // Empty or invalid line
        System.out.println("Skipping empty or invalid line");
        this.incrementLineTracker();
    }
}

AbstractStatementTreeNode statement() throws CompilerException: {
    Token x;
    AbstractValueTreeNode leftExpr, rightExpr, var, expr;
    AbstractStatementTreeNode stmt, thenStmt, elseStmt;
    AbstractComparisonOperatorTreeNode re;
}
{
    <PRINT> expr = expression() {
        if (expr == null) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.getLineTrackerumber(), "Expecting expression");
        System.out.println("Print statement " + getLineTrackerumber());
        return new PrintTreeNode(expr);
    }
    |
    <GOTO> expr = expression() {
        if (expr == null) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.getLineTrackerumber(), "Expecting expression");
        System.out.println("Goto statement " + getLineTrackerumber());
        return new GotoTreeNode(expr);
    }
    |
    <INPUT> var = factor() {
        return new InputTreeNode(var);
    }
    |
    <LET> var = factor() <EQ> expr = expression() {
        if (var == null) throw new CompilerException(CompilationErrorType.SYNTAX_ERROR, this.getLineTrackerumber(), "Expecting variable");
        else if (expr == null) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.getLineTrackerumber(), "Expecting expression");
        return new LetTreeNode(var.toString(), expr);
    }
    |
    <GOSUB> expr = expression() {
        return new GosubTreeNode(expr);
    }
    |
    <RETURN> {
        return new ReturnTreeNode();
    }
    |
    <END> {
        return new EndTreeNode();
    }
    |
    <IF> leftExpr = expression() re = relop() rightExpr = expression() <THEN> thenStmt = statement() elseStmt = statement() {
        if (leftExpr == null || rightExpr == null) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.getLineTrackerumber(), "Expecting expression");
        else if (re == null) throw new CompilerException(CompilationErrorType.EXPECTING_COMPARISON_OPERATOR, this.getLineTrackerumber(), "Expecting relop");
        else if (thenStmt == null) throw new CompilerException(CompilationErrorType.NO_STATEMENT_IN_THEN_BLOCK, this.getLineTrackerumber(), "Expecting then");
        re.setOperands(leftExpr, rightExpr);
        return new IfThenTreeNode(re, thenStmt, elseStmt);
    }
    |
    <WHILE> leftExpr = expression() re = relop() rightExpr = expression() <DO> stmt = statement() <WEND> {
        if (leftExpr == null || rightExpr == null) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.getLineTrackerumber(), "Expecting expression");
        else if (re == null) throw new CompilerException(CompilationErrorType.EXPECTING_COMPARISON_OPERATOR, this.getLineTrackerumber(), "Expecting relop");
        else if (stmt == null) throw new CompilerException(CompilationErrorType.NO_STATEMENT_IN_WHILE_BLOCK, this.getLineTrackerumber(), "Expecting then");
        re.setOperands(leftExpr, rightExpr);
        return new WhileTreeNode(re, stmt);
    }
}

AbstractComparisonOperatorTreeNode relop() throws ParseException, CompilerException: {}
{
    <DIFF> { return new NotEqualTreeNode(); }
    |
    <LE> { return new LowerEqualTreeNode(); }
    |
    <GE> { return new GreaterEqualTreeNode(); }
    |
    <EQ> { return new EqualTreeNode(); }
    |
    <LT> { return new LowerThanTreeNode(); }
    |
    <GT> { return new GreaterThanTreeNode(); }
}

AbstractValueTreeNode expression() throws ParseException, CompilerException: {
    AbstractValueTreeNode leftOp, expr;
}
{
    leftOp = term()
    expr = expression_end(leftOp) {
        if (leftOp == null) throw new CompilerException(CompilationErrorType.EXPECTING_LEFT_OPERAND, this.getLineTrackerumber(), "Expecting a left operand");
        else if (expr == null) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.getLineTrackerumber(), "Expecting an expression");
        else return expr;
    }
}

AbstractValueTreeNode expression_end(AbstractValueTreeNode leftOp) throws ParseException, CompilerException: {
    AbstractValueTreeNode rightOp, expr;
}
{
    <PLUS> rightOp = term() expr = expression_end(leftOp) {
        if (rightOp == null) throw new CompilerException(CompilationErrorType.EXPECTING_RIGHT_OPERAND, this.getLineTrackerumber(), "Expecting a right operand");
        else if (expr == null) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.getLineTrackerumber(), "Expecting an expression");
        else return new AdditionTreeNode(leftOp, rightOp);
    }
    |
    <MINUS> rightOp = term() expr = expression_end(leftOp) {
        if (rightOp == null) throw new CompilerException(CompilationErrorType.EXPECTING_RIGHT_OPERAND, this.getLineTrackerumber(), "Expecting a right operand");
        else if (expr == null) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.getLineTrackerumber(), "Expecting an expression");
        else return new SubtractionTreeNode(leftOp, rightOp);
    }
    |
    <AND> rightOp = term() expr = expression_end(leftOp) {
        if (rightOp == null) throw new CompilerException(CompilationErrorType.EXPECTING_RIGHT_OPERAND, this.getLineTrackerumber(), "Expecting a right operand");
        else if (expr == null) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.getLineTrackerumber(), "Expecting an expression");
        else return new BooleanAndTreeNode(leftOp, rightOp);
    }
    |
    <OR> rightOp = term() expr = expression_end(leftOp) {
        if (rightOp == null) throw new CompilerException(CompilationErrorType.EXPECTING_RIGHT_OPERAND, this.getLineTrackerumber(), "Expecting a right operand");
        else if (expr == null) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.getLineTrackerumber(), "Expecting an expression");
        else return new BooleanOrTreeNode(leftOp, rightOp);
    }
    |
    <XOR> rightOp = term() expr = expression_end(leftOp) {
        if (rightOp == null) throw new CompilerException(CompilationErrorType.EXPECTING_RIGHT_OPERAND, this.getLineTrackerumber(), "Expecting a right operand");
        else if (expr == null) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.getLineTrackerumber(), "Expecting an expression");
        else return new BooleanXorTreeNode(leftOp, rightOp);
    }
    |
    { return leftOp; }
}

AbstractValueTreeNode term() throws ParseException, CompilerException: {
    AbstractValueTreeNode leftOp, term;
}
{
    leftOp = factor()
    term = term_end(leftOp) {
        if (leftOp == null) throw new CompilerException(CompilationErrorType.EXPECTING_LEFT_OPERAND, this.getLineTrackerumber(), "Expecting a left operand");
        else if (term == null) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.getLineTrackerumber(), "Expecting an expression");
        else return term;
    }
}

AbstractValueTreeNode term_end(AbstractValueTreeNode leftOp) throws ParseException, CompilerException: {
    AbstractValueTreeNode rightOp, term;
}
{
    <MULTIPLY> rightOp = factor() term = term_end(leftOp) {
        if (rightOp == null) throw new CompilerException(CompilationErrorType.EXPECTING_RIGHT_OPERAND, this.getLineTrackerumber(), "Expecting a right operand");
        else if (term == null) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.getLineTrackerumber(), "Expecting an expression");
        else return new MultiplicationTreeNode(leftOp, rightOp);
    }
    |
    <DIVIDE> rightOp = factor() term = term_end(leftOp) {
        if (rightOp == null) throw new CompilerException(CompilationErrorType.EXPECTING_RIGHT_OPERAND, this.getLineTrackerumber(), "Expecting a right operand");
        else if (term == null) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.getLineTrackerumber(), "Expecting an expression");
        else return new DivisionTreeNode(leftOp, rightOp);
    }
    |
    { return leftOp; }
}

AbstractValueTreeNode factor() throws ParseException, CompilerException: {
    AbstractValueTreeNode expr, var;
}
{
    <OPEN_PARENT> expr = expression() <CLOSE_PARENT> {
        if (expr == null) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.getLineTrackerumber(), "Expecting an expression");
        else return expr;
    }
    |
    <NOT> expr = expression() {
        if (expr == null) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, this.getLineTrackerumber(), "Expecting an expression");
        else return new BooleanNotTreeNode(expr);
    }
    |
    <NUMBER> {
        Token t = jj_consume_token(NUMBER);
        return new NumberTreeNode(new Value(t.image));
    }
    |
    <STRING> {
    Token t = jj_consume_token(STRING);
    System.out.println("String token recognized" + t.image);
    return new StringTreeNode(new Value(t.image));
}
    |
    <TRUE> {
        jj_consume_token(TRUE);
        return new BooleanTreeNode(true);
    }
    |
    <FALSE> {
        jj_consume_token(FALSE);
        return new BooleanTreeNode(false);
    }
    |
    <UNDEF> {
        jj_consume_token(UNDEF);
        return new UndefTreeNode();
    }
    |
    <IDENTIFIER> {
        Token t = jj_consume_token(IDENTIFIER);
        return new IdentifierTreeNode(t.image);
    }
}