
options {
  IGNORE_CASE = true;
  STATIC = false;
} 


PARSER_BEGIN(BasicParser)

package fr.utbm.info.da53.lw2.parser;

import java.io.StringReader;
import fr.utbm.info.da53.lw2.symbol.*;



public class BasicParser {
    
    private String testChecker;

    private int basicLineNumber = 1;
	private final SymbolTable symbolTable = new SymbolTable();

	public SymbolTable getSymbolTable() {
		return this.symbolTable;
	}

    public BasicParser() {
    }

    public void parse(String input) throws ParseException {
        BasicParser parser = new BasicParser(new StringReader(input));
        parser.S(); // Start parsing from the grammar's start symbol
        System.out.println("Syntax is correct!");
    }

    public int getBasicLineNumber(){
        return this.basicLineNumber;
    }



    // Create something that goes with a symbol table.
    // Each new token goes with the declare methode
    // 


}

PARSER_END(BasicParser)

// *** The skip Token with the comment token

SKIP:  { " " | "\t" | "\r" | <"REM" ((" "|"\t")(~["\n","\r"])*)? ("\n" | "\r" | "\r\n" | "\n\r")> }


// *** Token Definitions


TOKEN: { <CR: "\n"> }

// Number token
TOKEN: { <NUMBER : (["0"-"9"])+ ("." (["0"-"9"])+)?> 
        | <OPEN_PARENT: "(">
        | <CLOSE_PARENT: ")">

        }


// Keyword token

TOKEN: { <PRINT: "print"> 
        | <GOTO: "goto">
        | <INPUT: "input">
        | <LET: "let">
        | <RETURN: "return">
        | <GOSUB: "gosub">
        | <END: "end">
        | <IF: "if">
        | <THEN: "then">
        | <ELSE: "else">
        | <WHILE: "while">
        | <FOR: "for">
        | <TO: "to">
        | <STEP: "step">
        | <NEXT: "next">
        | <DO: "do">
        | <WEND: "wend">
        }
// Relop token

TOKEN: { <DIFF: "<>">
        | <EQ: "=">
        | <LE: "<="> 
        | <GE: ">=">
        | <LT: "<">
        | <GT: ">">
        | <PLUS: "+">
        | <MINUS: "-">
        | <MULTIPLY: "*">
        | <DIVIDE: "/">
        | <AND: "and">
        | <OR: "or">
        | <XOR: "xor">
        | <NOT: "not">
        | <FALSE: "false">
        | <TRUE: "true">
         }


// Other Token 
TOKEN: { <COMA: ","> 
        | <STRING: "\"" (~["\""])* "\"" >
        | <UNDEF: "undef">
        }

TOKEN: { <IDENTIFIER: ["a"-"z", "A"-"Z"](["a"-"z", "A"-"Z", "0"-"9"])*> } // Put it a the end in order to reconize it at lastly.

// Grammar Rules from the course
void S(): {} { statements() }

void statements(): {}
{
    lineOfCode() restOfStatements()
}

void restOfStatements(): {}
{
    <CR> lineOfCode() restOfStatements()
    |
    {}
}

void lineOfCode(): {}
{
    <NUMBER> statement()
    |
    statement()
}

void statement(): {Token x;}
{
    <PRINT> expression()
    |
    <GOTO> expression()
    |
    <INPUT> var_list()
    |
    <LET> x = <IDENTIFIER> arrayIndex() <EQ> expression() {
        if (this.symbolTable.contains(x.image)) {
            System.out.println("Variable already exists: " + x.image);
        } else {
            this.symbolTable.declare(x.image, this.getBasicLineNumber());
            System.out.println("Declared variable: " + x.image);
        }
    }
    |
    <GOSUB> expression()
    |
    <RETURN>
    |
    <END>
    |
    <IF> expression() relop() expression() <THEN> statement() elseStatement()
    |
    <WHILE> expression() relop() expression() <DO> statement() <WEND>
    |
    <FOR> <IDENTIFIER> <EQ> expression() <TO> expression() forStep() statement() <NEXT> <IDENTIFIER>
}

void elseStatement(): {}
{
    <ELSE> statement()
    |
    {} // Empty
}

void forStep(): {}
{
    <STEP> expression()
    |
    {}
}

void relop(): {}
{
    <DIFF>
    |
    <LE>
    |
    <GE>
    |
    <EQ>
    |
    <LT>
    |
    <GT>
}

void var_list(): {}
{
    <IDENTIFIER> arrayIndex() var_list_opt()
}

void var_list_opt(): {}
{
    <COMA> <IDENTIFIER> arrayIndex() var_list_opt()
    |
    {}
}

void arrayIndex(): {}
{
    <OPEN_PARENT> expression() <CLOSE_PARENT>
    |
    {}
}

void expression(): {}
{
    term() expression_end()
}

void expression_end(): {}
{
    <PLUS> term() expression_end()
    |
    <MINUS> term() expression_end()
    |
    {}
}

void term(): {}
{
    iterm() term_end()
}

void term_end(): {}
{
    <MULTIPLY> iterm() term_end()
    |
    <DIVIDE> iterm() term_end()
    |
    {}
}

void iterm(): {}
{
    factor() iterm_end()
    |
    {}
}

void iterm_end(): {}
{
    <AND> factor() iterm_end()
    |
    <OR> factor() iterm_end()
    |
    <XOR> factor() iterm_end()
    |
    {}
}

void factor(): {}
{
    <OPEN_PARENT> expression() <CLOSE_PARENT>
    |
    <NOT> expression()
    |
    <NUMBER>
    |
    <STRING>
    |
    <TRUE>
    |
    <FALSE>
    |
    <UNDEF>
    |
    <IDENTIFIER> arrayIndex()
}