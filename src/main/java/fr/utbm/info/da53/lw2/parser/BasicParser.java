/* BasicParser.java */
/* Generated By:JavaCC: Do not edit this line. BasicParser.java */
package fr.utbm.info.da53.lw2.parser;
import java.io.StringReader;



public class BasicParser implements BasicParserConstants {

    private String testChecker;

    private int basicLineNumber = 1;
        private final SymbolTable symbolTable = new SymbolTable();

        public SymbolTable getSymbolTable() {
                return this.symbolTable;
        }

    public BasicParser() {
    }

    public static void parse(String input) throws ParseException {
        BasicParser parser = new BasicParser(new StringReader(input));
        parser.S(); // Start parsing from the grammar's start symbol
        System.out.println("Syntax is correct!");
    }

// Put it a the end in order to reconize it at lastly.

// Grammar Rules from the course
  static final public void S() throws ParseException {
    statements();
}

  static final public void statements() throws ParseException {
    lineOfCode();
    restOfStatements();
}

  static final public void restOfStatements() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CR:{
      jj_consume_token(CR);
      lineOfCode();
      restOfStatements();
      break;
      }
    default:
      jj_la1[0] = jj_gen;

    }
}

  static final public void lineOfCode() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:{
      jj_consume_token(NUMBER);
      statement();
      break;
      }
    case PRINT:
    case GOTO:
    case INPUT:
    case LET:
    case RETURN:
    case GOSUB:
    case END:
    case IF:
    case WHILE:
    case FOR:{
      statement();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PRINT:{
      jj_consume_token(PRINT);
      expression();
      break;
      }
    case GOTO:{
      jj_consume_token(GOTO);
      expression();
      break;
      }
    case INPUT:{
      jj_consume_token(INPUT);
      var_list();
      break;
      }
    case LET:{
      jj_consume_token(LET);
      jj_consume_token(IDENTIFIER);
      arrayIndex();
      jj_consume_token(EQ);
      expression();
      break;
      }
    case GOSUB:{
      jj_consume_token(GOSUB);
      expression();
      break;
      }
    case RETURN:{
      jj_consume_token(RETURN);
      break;
      }
    case END:{
      jj_consume_token(END);
      break;
      }
    case IF:{
      jj_consume_token(IF);
      expression();
      relop();
      expression();
      jj_consume_token(THEN);
      statement();
      elseStatement();
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      expression();
      relop();
      expression();
      jj_consume_token(DO);
      statement();
      jj_consume_token(WEND);
      break;
      }
    case FOR:{
      jj_consume_token(FOR);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(EQ);
      expression();
      jj_consume_token(TO);
      expression();
      forStep();
      statement();
      jj_consume_token(NEXT);
      jj_consume_token(IDENTIFIER);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void elseStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      statement();
      break;
      }
    default:
      jj_la1[3] = jj_gen;

    }
}

  static final public void forStep() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STEP:{
      jj_consume_token(STEP);
      expression();
      break;
      }
    default:
      jj_la1[4] = jj_gen;

    }
}

  static final public void relop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DIFF:{
      jj_consume_token(DIFF);
      break;
      }
    case LE:{
      jj_consume_token(LE);
      break;
      }
    case GE:{
      jj_consume_token(GE);
      break;
      }
    case EQ:{
      jj_consume_token(EQ);
      break;
      }
    case LT:{
      jj_consume_token(LT);
      break;
      }
    case GT:{
      jj_consume_token(GT);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void var_list() throws ParseException {
    jj_consume_token(IDENTIFIER);
    arrayIndex();
    var_list_opt();
}

  static final public void var_list_opt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMA:{
      jj_consume_token(COMA);
      jj_consume_token(IDENTIFIER);
      arrayIndex();
      var_list_opt();
      break;
      }
    default:
      jj_la1[6] = jj_gen;

    }
}

  static final public void arrayIndex() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN_PARENT:{
      jj_consume_token(OPEN_PARENT);
      expression();
      jj_consume_token(CLOSE_PARENT);
      break;
      }
    default:
      jj_la1[7] = jj_gen;

    }
}

  static final public void expression() throws ParseException {
    term();
    expression_end();
}

  static final public void expression_end() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:{
      jj_consume_token(PLUS);
      term();
      expression_end();
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
      term();
      expression_end();
      break;
      }
    default:
      jj_la1[8] = jj_gen;

    }
}

  static final public void term() throws ParseException {
    iterm();
    term_end();
}

  static final public void term_end() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MULTIPLY:{
      jj_consume_token(MULTIPLY);
      iterm();
      term_end();
      break;
      }
    case DIVIDE:{
      jj_consume_token(DIVIDE);
      iterm();
      term_end();
      break;
      }
    default:
      jj_la1[9] = jj_gen;

    }
}

  static final public void iterm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:
    case OPEN_PARENT:
    case NOT:
    case FALSE:
    case TRUE:
    case STRING:
    case UNDEF:
    case IDENTIFIER:{
      factor();
      iterm_end();
      break;
      }
    default:
      jj_la1[10] = jj_gen;

    }
}

  static final public void iterm_end() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:{
      jj_consume_token(AND);
      factor();
      iterm_end();
      break;
      }
    case OR:{
      jj_consume_token(OR);
      factor();
      iterm_end();
      break;
      }
    case XOR:{
      jj_consume_token(XOR);
      factor();
      iterm_end();
      break;
      }
    default:
      jj_la1[11] = jj_gen;

    }
}

  static final public void factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN_PARENT:{
      jj_consume_token(OPEN_PARENT);
      expression();
      jj_consume_token(CLOSE_PARENT);
      break;
      }
    case NOT:{
      jj_consume_token(NOT);
      expression();
      break;
      }
    case NUMBER:{
      jj_consume_token(NUMBER);
      break;
      }
    case STRING:{
      jj_consume_token(STRING);
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
      break;
      }
    case UNDEF:{
      jj_consume_token(UNDEF);
      break;
      }
    case IDENTIFIER:{
      jj_consume_token(IDENTIFIER);
      arrayIndex();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public BasicParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x20,0x19fe40,0x19fe00,0x40000,0x400000,0xfc000000,0x0,0x80,0x0,0x0,0xc0,0x0,0xc0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x3,0xc,0x3b80,0x70,0x3b80,};
	}

  /** Constructor with InputStream. */
  public BasicParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public BasicParser(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new BasicParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public BasicParser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new BasicParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new BasicParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public BasicParser(BasicParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(BasicParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[46];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 13; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 46; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

    // Create something that goes with a symbol table.
    // Each new token goes with the declare methode
    // Create a getSymboleTable, that return the symbole table for the main.
    // 


}
